<div class="map" tabindex="0" @onkeypress="KeyPress">

    @if (true)
    {
        <div style="background-color:#111111; color:white; width: 100%; ">Map of the Galaxy</div>
    }
    else
    {
        /* Kaypro style */
        <div class="map-title">Map of the Galaxy</div>
        <div class="map-title">@((String.Concat(Enumerable.Repeat("*", GameConfig.X_dimension * 3 - 2))))</div>
    }
    <div>
        @* Draw the x-axis with letters *@
        <div class="map-row" style="clear: both;">
            <div class="map-sector map-axis">&nbsp;</div>
            @for (int x = 0; x <= map.X_UpperBound; x++)
            {
                <div class="map-sector map-axis">@((char)(x + 65))</div>
            }
        </div>

        @* Draw each row of the galaxy *@
        @for (int y = 0; y <= map.Y_UpperBound; y++)
        {
            @* Draw a row of the galaxy, placing a numeric coordinate at the left *@
            <div class="map-row">
                @* Write the numeric coordinate *@
                <div class="map-sector map-axis" style="clear: none">@(y + 1)</div>
                @* Draw the contents of the galaxy for this row *@
                @for (int x = 0; x <= map.X_UpperBound; x++)
                {
                    string moveNumber = map[x, y];
                    @if ("123456789".Contains(map[x, y]))
                    {
                        @* Add onclick actions to sectors that are moves for this turn *@
                        <div class="map-sector @(SectorClass(map[x, y])) @((GameStateObj.LastMove != null) && (GameStateObj.LastMove.X == x) && (GameStateObj.LastMove.Y == y) ? "map-last-move" : "")" @onclick="@(() => MakeMapMove(moveNumber))">@(map[x, y])</div>

                    }
                    else
                    {
                        <div class="map-sector @(SectorClass(map[x, y])) @((GameStateObj.LastMove != null) && (GameStateObj.LastMove.X == x) && (GameStateObj.LastMove.Y == y) ? "map-last-move" : "")">@(map[x, y])</div>
                    }
                }
            </div>
        }
    </div>

</div>

@code {

    public void KeyPress(KeyboardEventArgs e)
    {
        MakeMapMove(e.Key);
    }

    [Parameter]
    public GameConfiguration GameConfig { get; set; }

    [Parameter]
    public GameStateObject GameStateObj { get; set; }

    [Parameter]
    public GalaxyMap map { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveClickCallback { get; set; }

    private void MakeMapMove(string movenum)
    {
        int move = 0;
        if (int.TryParse(movenum, out move))
        {
            if ((move >= 1) && (move <= GameConfig.NumberOfMoves))
                OnMoveClickCallback.InvokeAsync(move);
        }
    }


    // conditional CSS classes for sector based on their map value
    private string SectorClass(string sectorValue)
    {
        switch (sectorValue)
        {
            case GalaxyMap.ConsumedSector:
                return "map-sector-consumed";
            case GalaxyMap.EmptySector:
                return "map-sector-empty";
            case GalaxyMap.DevelopedSector:
                return "map-sector-developed";
            case GalaxyMap.StarSector:
                return "map-sector-star";
            case GalaxyMap.BlackholeSector:
                return "map-sector-blackhole";
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
                return "map-sector-move";
        }

        if ("ABCDEFGHIJKL".Contains(sectorValue)) return "map-sector-company";

        return String.Empty;
    }

}
